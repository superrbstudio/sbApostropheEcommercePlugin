<?php

/**
 * PluginsbEcomBasketProductTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginsbEcomBasketProductTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginsbEcomBasketProductTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginsbEcomBasketProduct');
    }
		
		/**
		 * Returns a Product in a user's basket
		 * Will also combine any duplicates found
		 * 
		 * @param integer $productId The database ID of the product
		 * @param string $sessionId The users session id
		 * @return sbEcomBasketProduct 
		 */
		public static function getBasketProductForUserByProductId($productId, $sessionId)
		{
			$root = Doctrine_Query::create()
							->select()
							->from('sbEcomBasketProduct b')
							->where('b.product_id = ?', $productId)
							->andWhere('b.session_id = ?', $sessionId)
							->execute();
			if(!$root) { return; }
			
			$prods = $root->getData();
			$prodCount = count($prods);
			
			if($prodCount == 1)
			{
				return $prods[0];
			}
			
			if($prodCount > 1)
			{
				$basketProduct = $prods[0];
				$count = $basketProduct->getQuantity();
				
				// add up all quantities
				for($i = 1; $i < $prodCount; $i++)
				{
					$count += $prods[$i]->getQuantity();
					$prods[$i]->delete();
				}
				
				$basketProduct->setQuantity($count);
				return $basketProduct;
			}
		}
		
		/**
		 * Adds a product to a users basket
		 * 
		 * @param type $productId
		 * @param type $sessionId
		 * @return boolean 
		 */
		public static function addProductToBasket($productId, $sessionId)
		{
			//check one doesn't exist already
			$basketProduct = self::getBasketProductForUserByProductId($productId, $sessionId);
			
			if(!($basketProduct instanceof sbEcomBasketProduct))
			{
				$basketProduct = new sbEcomBasketProduct();
				$basketProduct->setSessionId($sessionId);
				$basketProduct->setProductId($productId);
			}
			
			$basketProduct->setQuantity($basketProduct->getQuantity() + 1);
			return $basketProduct->save();
		}
}