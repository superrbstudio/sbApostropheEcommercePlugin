<?php

/**
 * PluginsbEcomProductTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @author Giles Smith <tech@superrb.com>
 */
class PluginsbEcomProductTable extends Doctrine_Table
{
	/**
		* Returns an instance of this class.
		*
		* @return object PluginsbEcomProductTable
		*/
	public static function getInstance()
	{
			return Doctrine_Core::getTable('sbEcomProduct');
	}

	/**
		* Returns all featured products
		* 
		* @return Doctrine_Collection 
		*/
	public static function getFeaturedProducts($category = null, $active = null, $params = array())
	{
		$fast = sfConfig::get('app_a_fasthydrate', false);
		$base = Doctrine_Query::create()->select('p.*')
						->from('sbEcomProduct p')
						->where('p.is_featured = ?', true);
		
		if($category != null)
		{
			$base->innerJoin('aCategory c');
			
			if(is_array($category))
			{
				$base->andWhereIn('c.id', $category);
			}
		}
		
		if(is_bool($active))
		{
			$base->andWhere('p.active = ?', $active);
		}
		
		if(isset($params['order_by']))
		{
			$base->orderBy($params['order_by']);
		}
		
		if(isset($params['limit']) and is_numeric($params['limit']))
		{
			$base->limit($params['limit']);
		}
						
		return $base->execute(array(), $fast ? Doctrine::HYDRATE_ARRAY : Doctrine::HYDRATE_RECORD);
	}

	/**
		* Returns all categories that are being used by shop products
		* 
		* @return Doctrine_Collection
		*/
	public static function getProductCategories($active = null, $params = array())
	{
		$fast = sfConfig::get('app_a_fasthydrate', false);
		$base = Doctrine_Query::create()
						->select('c.*')
						->from('aCategory c')
						->innerJoin('c.EcomProducts p')
						->where(1);

		if(is_bool($active))
		{
			$base->andwhere('p.active = ?', $active);
		}

		if(isset($params['order_by']))
		{
			$base->orderBy($params['order_by']);
		}

		return $base->execute(array(), $fast ? Doctrine::HYDRATE_ARRAY : Doctrine::HYDRATE_RECORD);
	}

	/**
		* Returns all product in a given category
		* 
		* @param aCategory $category 
		* @param boolean $active
		* @param array $params
		* @return Doctrine_Collection
		*/
	public static function getProductsInCategory(aCategory $category, $active = null, $params = array())
	{
		$fast = sfConfig::get('app_a_fasthydrate', false);
		$base = Doctrine_Query::create()
						->select('p.*')
						->from('sbEcomProduct p')
						->innerJoin('p.Categories c')
						->where('c.id = ?', $category->getId());

		if(is_bool($active))
		{
			$base->andWhere('p.active = ?', $active);
		}

		if(isset($params['order_by']))
		{
			$base->orderBy($params['order_by']);
		}

		return $base->execute(array(), $fast ? Doctrine::HYDRATE_ARRAY : Doctrine::HYDRATE_RECORD);
	}

	/**
		* Find an aCategory by its Slug
		* 
		* @param string $slug
		* @return aCategory 
		*/
	public static function getProductCategoryBySlug($slug)
	{
		return aCategoryTable::getInstance()->findOneBySlug($slug);
	}

	/**
		* Return a product from a given slug
		* 
		* @param string $slug
		* @return sbEcomProduct
		*/
	public static function getProductBySlug($slug)
	{
		return self::getInstance()->findOneBySlug($slug);
	}

	/**
		* Return a product from a given id
		*
		* @param integer $id
		* @return sbEcomProduct
		*/
	public static function getProductById($id)
	{
		return self::getInstance()->findOneById($id);
	}

	/**
	 * Creates a unique name for the product slideshow
	 * 
	 * @param sbEcomProduct $product
	 * @return string 
	 */
	public static function getSlideShowName($product)
	{
		return  'sb-ecom-product-' . $product['id'];
	}
	
	/**
	 * Creates a unique slug for the product slideshow
	 * 
	 * @param sbEcomProduct $product
	 * @return string 
	 */
	public static function getSlideShowSlug($product)
	{
		return 'sb-ecom-product-' . $product['id'];
	}
	
	/**
	 * Returns the first image in a product slideshow
	 * 
	 * @param sbEcomProduct $product
	 * @return mixed - False when unable to find an image, otherwise the image object 
	 */
	public static function getFirstImage($product)
	{
		$page = aPageTable::retrieveBySlugWithSlots(self::getSlideShowSlug($product));
		
		if(!$page) { return false; }
		
		$slot = $page->getSlot(self::getSlideShowName($product));
		
		if($slot)
		{
			$images = $slot->getOrderedMediaItems();
			
			if($images)
			{
				return $images[0];
			}
		}
			
		return false;
	}
	
	/**
	 * Returns an array of sbGoogleSitemapPage objects for use by the google sitemap plugin
	 * @return array
	 */
	public static function pagesForSitemap()
	{
		$return = array();
		$products = self::getInstance()->findByActive(true);
		$host = sfContext::getInstance()->getRequest()->getHost();

		foreach($products as $product)
		{
			$return[] = new sbGoogleSitemapPage($host, url_for('@sb_ecom_product?slug=' . $product['slug']), false, 'weekly', 0.8, strtotime($product['updated_at']));
		}

		return $return;
	}
}