options: 
  type: INNODB
  
sbEcomCheckout:
  actAs:
    Timestampable: ~
  columns:
    contact_title:
      type: string(100)
    contact_firstname: 
      type: string(255)
    contact_lastname:
      type: string(255)
    contact_email:
      type: string(255)
    contact_telephone:
      type: string(100)
    contact_mobile:
      type: string(100)
    delivery_street_address:
      type: string(255)
    delivery_post_office_box_number:
      type: string(255)
    delivery_locality:
      type: string(255)
    delivery_region:
      type: string(255)
    delivery_postal_code:
      type: string(100)
    delivery_country:
      type: string(50)
    billing_street_address:
      type: string(255)
    billing_post_office_box_number:
      type: string(255)
    billing_locality:
      type: string(255)
    billing_region:
      type: string(255)
    billing_postal_code:
      type: string(100)
    billing_country:
      type: string(50)
    status:
      type: enum
      values: [ 'Complete', 'Paid', 'Awaiting Payment', 'Cancelled' ]
      default: 'Awaiting Payment'
    payment_reference:
      type: string(9999)
  indexes:
    status: { fields: [ status ] }
    delivery_country: { fields: [ delivery_country ] }
    delivery_region: { fields: [ delivery_region ] }
    billing_country: { fields: [ billing_country ] }
    billing_region: { fields: [ billing_region ] }
    contact_email: { fields: [ contact_email ] }
    
    

# Basket Items attached to session
sbEcomBasketProduct:
  actAs:
    Timestampable: ~
  columns:
    session_id:
      type: varchar(255)
    product_id:
      type: integer
    slot_id:
      type: integer
    quantity:
      type: integer
      default: 0
    item_cost:
      type: float
      default: 0
    postage_cost:
      type: float
      default: 0
    postage_cost_with_others:
      type: float
      default: 0
    item_tax: 
      type: float
      default: 0
    item_title:
      type: string(255)
    item_reference:
      type: string(255)
    checkout_id:
      type: integer
  relations:
    EcomProduct:
      class: aPage
      foreignAlias: EcomBasketProduct
      local: product_id
      foreign: id
      onDelete: SET NULL
    EcomSlot:
      class: aSlot
      foreignAlias: EcomBasketProductSlot
      local: slot_id
      foreign: id
      onDelete: SET NULL
    EcomCheckout:
      class: sbEcomCheckout
      foreignAlias: EcomCheckoutProduct
      local: checkout_id
      foreign: id
      onDelete: SET NULL
  indexes:
    # this is here to make basket clean ups easier
    updated_at: { fields: [ updated_at ] }
    # find users baskets quicker
    session_id: { fields: [ session_id ] }
    
    
sbEcomProduct:
  inheritance:
    extends: aPage
    type: simple
    
sbEcomAddToBasketSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbEcomAddToBasket'
sbEcomProductSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbEcomProduct'

sbEcomProductsSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbEcomProducts'

sbEcomAddToBasketWithOptionSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbEcomAddToBasketWithOption'
